from telegram import Bot;
from telegram import Update;
from telegram.ext import Updater;
from telegram.ext import CommandHandler;
from telegram.ext import MessageHandler;
from telegram.ext import Filters;
import telebot
from telebot import types #maxim bog
from docxtpl import DocxTemplate

TG_TOKEN = "957294714:AAFJRRACBuGuzUNFPZYMDQhn_mDZBffJwUU"

bot = telebot.TeleBot("957294714:AAFJRRACBuGuzUNFPZYMDQhn_mDZBffJwUU")


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    pravodoc_button = types.InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ÃÜ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data='pravodoc')
    faq_button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏", callback_data="faq")
    konsultation_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='konsultation')
    business_button = types.InlineKeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞", callback_data='business')
    about_button = types.InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data='about')
    keyboard.add(faq_button, konsultation_button, pravodoc_button, business_button, about_button)
    bot.send_message(message.chat.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n–Ø –Æ—Ä–∏—Å—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å ü§ñ",
                     reply_markup=keyboard)


@bot.message_handler(content_types=["text"])
def handle_start_text(message):
    if message.text == "–ú–∞–∫—Å–æ–Ω":
        bot.send_message(message.chat.id, "–î–∞\n–î–∞ –î–∞\n–≠—Ç —è)")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    pravodoc_button = types.InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ÃÜ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="pravodoc")
    faq_button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏", callback_data="faq")
    konsultation_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='konsultation')
    business_button = types.InlineKeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞", callback_data='business')
    about_button = types.InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data='about')
    keyboard.add(faq_button, konsultation_button, pravodoc_button, business_button, about_button)
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n–Ø –Æ—Ä–∏—Å—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å ü§ñ",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "faq":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        qa1_button = types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Ç–∏–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ", callback_data="qa1")
        back_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
        keyboard.add(qa1_button, back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="‚ùì –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚ùì", reply_markup=keyboard)
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="C–ø–∏—Å–æ–∫ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
    elif call.data == "back":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        pravodoc_button = types.InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ÃÜ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="pravodoc")
        faq_button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏", callback_data="faq")
        konsultation_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='konsultation')
        business_button = types.InlineKeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞", callback_data='business')
        about_button = types.InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data='about')
        keyboard.add(faq_button, konsultation_button, pravodoc_button, business_button, about_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n–Ø –Æ—Ä–∏—Å—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å ü§ñ",
                              reply_markup=keyboard)

    elif call.data == "pravodoc":
        doc_full()
        
@bot.message_handler(content_types=["text"])
def doc_full(message):
    doc = DocxTemplate("/Users/aleksandrten/Downloads/github/technobot/shablon.docx")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", reply_markup=keyboard)
    graph1 = message.text
    #bot.wait
    bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏", reply_markup=keyboard)
    graph2 = message.text
    #bot.wait
    context = { 'emitent' : graph1, 'address1' : graph2, '—É—á–∞—Å—Ç–Ω–∏–∫': '–û–û–û –£—á–∞—Å—Ç–Ω–∏–∫', '–∞–¥—Ä–µ—Å_—É—á–∞—Å—Ç–Ω–∏–∫–∞': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü–æ–ª–µ–≤–∞—è, –¥. 0', 'director': '–ò.–ò. –ò–≤–∞–Ω–æ–≤'}
    doc.render(context)
    doc.save("/Users/aleksandrten/Downloads/github/technobot/finalcut.docx")




if __name__ == '__main__':
    bot.infinity_polling()
