from telegram import Bot;
from telegram import Update;
from telegram.ext import Updater;
from telegram.ext import CommandHandler;
from telegram.ext import MessageHandler;
from telegram.ext import Filters;
import telebot
from telebot import types #maxim bog
from docxtpl import DocxTemplate

TG_TOKEN = "957294714:AAFJRRACBuGuzUNFPZYMDQhn_mDZBffJwUU"

bot = telebot.TeleBot("957294714:AAFJRRACBuGuzUNFPZYMDQhn_mDZBffJwUU")




@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    pravodoc_button = types.InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ÃÜ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data='pravodoc')
    faq_button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏", callback_data="faq")
    konsultation_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='konsultation')
    business_button = types.InlineKeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞", callback_data='business')
    about_button = types.InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data='about')
    keyboard.add(faq_button, konsultation_button, pravodoc_button, business_button, about_button)
    bot.send_message(message.chat.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! {} üëã \n–Ø –Æ—Ä–∏—Å—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å ü§ñ",reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "faq":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        alim_button = types.InlineKeyboardButton(text="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–ª–∏–º–µ–Ω—Ç–∞—Ö", callback_data="alim")
        back_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
        keyboard.add(alim_button, back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="‚ùì –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ", reply_markup=keyboard)
        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="C–ø–∏—Å–æ–∫ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
    elif call.data == "back":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        pravodoc_button = types.InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ÃÜ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="pravodoc")
        faq_button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏", callback_data="faq")
        konsultation_button = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='konsultation')
        business_button = types.InlineKeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞", callback_data='business')
        about_button = types.InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data='about')
        keyboard.add(faq_button, konsultation_button, pravodoc_button, business_button, about_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã \n–Ø –Æ—Ä–∏—Å—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å ü§ñ",
                              reply_markup=keyboard)
    elif call.data =="alim":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        back_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
        keyboard.add(back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/doc '",
                              reply_markup=keyboard)
    elif call.data == "about":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        func_button = types.InlineKeyboardButton(text="–ß—Ç–æ —è –º–æ–≥—É?",callback_data="func")
        boss_button = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ",callback_data="boss")
        back_button = types.InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data="back")
        keyboard.add(func_button,boss_button,back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ß—Ç–æ —è –º–æ–≥—É?"
        ,reply_markup=keyboard)


    elif call.data == "pravodoc":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        consult_button = types.InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",callback_data="consult")
        dogovor_button = types.InlineKeyboardButton(text="–í—Å–µ –æ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö",callback_data="dogovor")
        gr_button = types.InlineKeyboardButton(text="–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–∞–≤–æ",callback_data="gr")
        adm_button = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",callback_data="amd")
        home_button = types.InlineKeyboardButton(text="–ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ",callback_data="home")
        spor_button = types.InlineKeyboardButton(text="–û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",callback_data="spor")
        back_button = types.InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data="back")
        keyboard.add(consult_button,dogovor_button,gr_button,adm_button,home_button,spor_button,back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–†–∞–∑–±–æ—Ä—ã –ø—Ä–∞–≤–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"
        ,reply_markup=keyboard)


    elif call.data=="consultation":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        feedback_button = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫", callback_data="feedback")
        cont_button = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –Æ—Ä–∏—Å—Ç–∞",callback_data="cont")
        back_button = types.InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data="back")
        keyboard.add(cont_button,feedback_button,back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è"
        ,reply_markup=keyboard)
    elif call.data=="business":
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        sponsor_button = types.InlineKeyboardButton(text="–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",callback_data="sponsor")
        reklama_button = types.InlineKeyboardButton(text="–†–µ–∫–ª–∞–º–∞",callback_data="reklama")
        back_button = types.InlineKeyboardButton(text = "–ù–∞–∑–∞–¥",callback_data="back")
        keyboard.add(reklama_button,sponsor_button,back_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ"
        ,reply_markup=keyboard)

@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '/doc':
        global graph1
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á")
        bot.register_next_step_handler(message, get_1)
    else:
        bot.send_message(message.from_user.id, '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–ª–∏–º–µ–Ω—Ç–∞—Ö "/doc"')
def get_1(message):
    global FIO1
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ : 4615 123456')
    bot.register_next_step_handler(message, get_2)
    FIO1 = message.text
def get_2(message):
    global pass1
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
    bot.register_next_step_handler(message, get_3)
    pass1 = message.text
def get_3(message):
    global adress1
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á')
    bot.register_next_step_handler(message, get_4)
    adress1 = message.text
def get_4(message):
    global FIO2
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ : 4615 123456')
    bot.register_next_step_handler(message, get_5)
    FIO2 = message.text
def get_5(message):
    global pass2
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞')
    bot.register_next_step_handler(message, get_6)
    pass2 = message.text
def get_6(message):
    global adress2
    bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"')
    bot.register_next_step_handler(message, get_final)
    adress2 = message.text
def get_final(message):
    bot.send_message(message.from_user.id, '–í–∞—à –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª')
    doc = DocxTemplate("/Users/aleksandrten/Downloads/github/technobot/shablon.docx")
    context = { 'FIO1' : FIO1, 'pass1' : pass1, 'adress1' : adress1, 'FIO2' : FIO2, 'pass2' : pass2, 'adress2' : adress2 }
    doc.render(context)
    doc.save("/Users/aleksandrten/Downloads/github/technobot/finalcut.docx")
    doc = open("/Users/aleksandrten/Downloads/github/technobot/finalcut.docx", "rb")
    bot.send_document(message.chat.id, doc)


if __name__ == '__main__':
    bot.infinity_polling()
